#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.11"
# dependencies = [
#   "questionary",
#   "click",
# ]
# ///
"""
Create a git worktree with a standardized naming convention.

Setup: Add this alias to your ~/.bashrc or ~/.zshrc:
  alias wt-create='eval "$(~/Programming/brian-scripts/wt-create "$@" 2>&1 1>&3-)" 3>&1'

Usage: wt-create <branch-name>
Example: wt-create resend-email
  -> Creates branch: bs/resend-email
  -> Creates worktree at: ./.conductor/bs-resend-email
  -> Changes to the new directory
"""

import sys
import os
import subprocess
from pathlib import Path

import click
import questionary


def run_command(cmd, capture=True):
    """Run a shell command and return the result."""
    try:
        if capture:
            result = subprocess.run(
                cmd,
                shell=True,
                capture_output=True,
                text=True,
                check=True
            )
            return result.stdout.strip()
        else:
            subprocess.run(cmd, shell=True, check=True)
            return None
    except subprocess.CalledProcessError as e:
        return None


def check_git_repo():
    """Check if we're in a git repository."""
    result = run_command("git rev-parse --git-dir")
    return result is not None


def check_worktree_exists(path):
    """Check if a worktree already exists at the given path."""
    return Path(path).exists()


def check_branch_exists(branch_name):
    """Check if a branch exists locally."""
    result = run_command(f"git rev-parse --verify {branch_name}")
    return result is not None


def get_worktree_list():
    """Get list of existing worktrees."""
    result = run_command("git worktree list")
    return result if result else ""


@click.command()
@click.argument("branch_name")
@click.option("--prefix", default="bs", help="Branch prefix (default: bs)")
def main(branch_name, prefix):
    """Create a git worktree with standardized naming.

    Example: wt-create resend-email
      -> Creates branch: bs/resend-email
      -> Creates worktree at: ./.conductor/bs-resend-email
    """
    # Remove any existing prefix if user provided it
    branch_base = branch_name.replace(f"{prefix}/", "")

    # Construct the full branch name and directory
    full_branch = f"{prefix}/{branch_base}"
    worktree_dir = f"./.conductor/{prefix}-{branch_base}"

    print(f"Branch: {full_branch}")
    print(f"Worktree directory: {worktree_dir}")
    print()

    # Check if we're in a git repo
    if not check_git_repo():
        print("‚ùå Error: Not in a git repository")
        sys.exit(1)

    # Check if worktree directory already exists
    if check_worktree_exists(worktree_dir):
        print(f"‚ùå Error: Directory {worktree_dir} already exists")

        # Show existing worktrees
        print("\nExisting worktrees:")
        print(get_worktree_list())
        sys.exit(1)

    # Check if branch already exists
    branch_exists = check_branch_exists(full_branch)
    if branch_exists:
        print(f"‚ö†Ô∏è  Branch {full_branch} already exists")

        use_existing = questionary.confirm(
            "Do you want to use the existing branch?",
            default=True
        ).ask()

        if not use_existing:
            print("Aborted.")
            sys.exit(0)

        # Use existing branch (remove -B flag)
        cmd = f"git worktree add {worktree_dir} {full_branch}"
    else:
        # Create new branch
        cmd = f"git worktree add -B {full_branch} {worktree_dir}"

    # Create the .conductor directory if it doesn't exist
    os.makedirs(".conductor", exist_ok=True)

    # Run the command
    print("\nüî® Creating worktree...")
    run_command(cmd, capture=False)

    print(f"‚úÖ Worktree created at {worktree_dir}")
    print(f"   Branch: {full_branch}")
    print("   Changing directory...")

    # Output cd command for shell to eval (redirect to stderr so normal output is clean)
    abs_path = os.path.abspath(worktree_dir)
    print(f"cd '{abs_path}'", file=sys.stderr)


if __name__ == "__main__":
    main()
